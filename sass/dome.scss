// ----
// Sass (v3.4.12)
// Compass (v1.0.3)
// ----

//@for
$grid-prefix: span !default;
$grid-width: 60px !default;
$grid-gutter: 20px !default;

%grid {
  float: left;
  margin-left: $grid-gutter / 2;
  margin-right: $grid-gutter / 2;
}

//through
@for $i from 1 through 12 {
  .#{$grid-prefix}#{$i}{
    width: $grid-width * $i + $grid-gutter * ($i - 1);
    @extend %grid;
  }  
}

//to
// @for $i from 1 to 13 {
//   .#{$grid-prefix}#{$i}{
//     width: $grid-width * $i + $grid-gutter * ($i - 1);
//     @extend %grid;
//   }  
// }

$types:4;
$type-width:20px;

//@while
@while $types > 0 {
  .while-#{$types} {
    width: $type-width + $types;
  }
  $types: $types - 1;
}

// @each
$list: adam john wynn mason kuroir;
@mixin author-images {
  @each $author in $list {
    .photo-#{$author} {
      background:url("/images/avatars/#{$author}.png") no-repeat;
    }
  }
}

.author-bio {
 @include author-images;
}

// string fun-->unquote()
.test1 {
  content: unquote('Hello Sass!');
}
.test2 {
  content: unquote("'Hello Sass!");
}
.test4 {
    content: unquote("'Hello Sass!'");
}
.test3 {
    content: unquote("I'm Web Designer");
}
.test5 {
    content: unquote('"Hello Sass!"');
}
.test6 {
    content: unquote(Hello Sass);
}
//string fun --> quote()
.quote1 {
  content: quote('Hello Sass!');
}
.quote2 {
  content:quote("Hello Sass!");
}
.quote3 {
  content:quote(ImWebDesigner);
}
.quote4 {
  content:quote(' ');
}
// string fun --> To-upper-case()
.upper-case{
  text: to-upper-case(aaaa);
  text: to-upper-case(aA-aAAA-aaa);
}
.lower-case{
  text:to-lower-case(AAAA);
  text:to-lower-case(aA-aAAA-aaa);
}
//digit fun --> percentage()
.test-percentage {
  width: percentage(.2);
  height: percentage(2px / 10px);
}
//digit fun --> round()
.test-round {
  padding: round(12.3) round(12.5) round(1.49999) round(2.0);
  margin: round(20%) round(2.2%) round(3.9em) round(2.3px);
  left: round(2px/3px);
  right: round(1px/3px);
}
//digit fun --> ceil()
.test-ceil {
  margin:ceil(2.0) ceil(2.1) ceil(2.6) ceil(2.3%);
  padding:ceil(2.5px) ceil(2px/3px);
}
//digit fun --> floor()
.test-floor {
  margin: floor(2.1) floor(2.5) floor(10.8em) floor(10.2px);
}
//digit fun --> abs()
.test-abs{
  margin:abs(10) abs(-10) abs(-.5%) abs(-1px/2px);
}
//digit fun --> min() max()
.test-min-max {
  top: min(1,2,1%,3,300%);
  left: min(1px,2,3px);
  right:max(1,5);
  bottom:max(1px,10px);
}
//digit fun --> random()
.test-random{
  top:random();
}

//list fun -->length()
.test-length {
  top:length(10px);
  right:length(10px 20px (border 1px solid) 2em);
  left:length(border 1px solid);
}
//list fun -->nth()
.test-nth {
  left:nth(10px 20px 30px,1);
  font-family:nth((Helvetica,Arial,sans-serif),2);
  border:nth((1px solid red) border-top green,1)
}
//list fun --> join()
.test-join {
  margin:join(10px 20px,30px 40px);
  color:join((blue,red),(#abc,#def));
  background-color: join((blue,red),(#abc #def));
  top:join((blue red), join((#abc #def),(#dee #eff)));
  left:join(blue,(green,orange));
  right:join(blue,(green orange));
  bottom:join(blue,red);
  vertical-align: join(blue,red,comma);
  clear: join((blue, green),(red,orange),space)
}
//list fun --> append()
.test-append {
  top:append(10px 20px,30px);
  right:append((10px,20px),30px);
  left:append(red,(green,blue));
  bottom: append((blue green),red,comma);
  color:append((blue, green),red,space);
}
//list fun --> zip()
.test-zip {
  border:zip(1px 2px 3px,solid dashed dotted,green blue red);
}
//list fun --> index()
.test-index {
  top:index(1px solid red,1px);
  left:index(1px solid red,dotted);
}
//Introspection fun --> type-of()
.test-type-of {
  top:type-of(100);
  top:type-of(100px);
  top:type-of("abcdef");
  top:type-of(abcdef);
  top:type-of(true);
  top: type-of(false);
  top:type-of(#fff);
  top:type-of(blue);
  top:type-of(1/2=1)
}
//Introspection fun --> unit()
.test-unit {
  left:unit(100);
  left:unit(100px);
  left:unit(20%);
  left:unit(1em);
  left:unit(10px*3em);
  left:unit(10px/3em);
  left:unit(10px*3em / 3cm / 1rem);
  left:unit(1px + 1cm);
  left:unit(1px - 1cm);
  left:unit(1px + 1mm);
}
//Introspection fun --> unitless()
.test-unitless {
  right:unitless(100);
  right:unitless(100px);
  right:unitless(100%);
  right:unitless(1/2);
  right:unitless(1/2+2);
  right:unitless(1px/2+2);
}
//Introspection fun --> comparable()
.test-comparable {
  top:comparable(2px,1px);
  top:comparable(2px,1%);
  top:comparable(2px,1em);
  top:comparable(2rem,1em);
  top:comparable(2px,1cm);
  top:comparable(2px,1mm)
}
//Miscellaneous fun
.test-if {
  bottom:if(true,1px,2px);
  bottom:if(false,1px,2px);
}
// Map 
$theme-color: (
  default: (
    bgcolor: #fff,
    text-color:#444,
    link-color:#39f
  ),
  primary:(
    bgcolor:#000,
    text-color:#fff,
    link-color:#93f
  ),
  negative:(
    bgcolor:#f36,
    text-color:#fefefe,
    link-color:#d4e
  )
);

//Maps fun -->map-get($map,$key)
$social-colors: (
  dribble: #ea3c89,
  facebook:#3b5998,
  github: #171515,
  google:#db4437,
  twitter:#55acee
);
.test-map-get {
  color:map-get($social-colors,facebook);
  background-color:map-get($social-colors,weibo);
}
//Maps fun --> map-has-key($map,$key)
/* type-1*/
@if map-has-key($social-colors,weibo){
  .btn-facebook {
    color: map-get($social-colors,weibo);
  }
} @else {
  @warn "No color found for weibo in $social-colors map. Property ommitted."
}
/* type-2*/
@function colors($color){
  @if not map-has-key($social-colors,$color) {
    @warn "No color found for '#{$color}' in $social-colors map. Property ommitted"
  }
  @return map-get($social-colors,$color);
}
.btn-weixin{
  color:colors(weixin);
}
.btn-github{
  color:colors(github);
}
/* type-3*/
@each $social-network,$social-color in
$social-colors {
  .btn-#{$social-network} {
    color: colors($social-network);
  }
}
// Maps fun --> map-keys($map)
$list-keys:map-keys($social-colors);
.test-map-keys {
  color: $list-keys;
}

@function _colors($color) {
  $names: map-keys($social-colors);
  @if not index($names,$color) {
    @warn "Waring: '#{$color}' isnot a valid color name."
  }
  @return map-get($social-colors,$color);
}
.btn-meipai {
  color:_colors(meipai);
}

@each $param in map-keys($social-colors) {
  .span-#{$param} {
    color: _colors($param);
  }
}

@for $i from 1 through length(map-keys($social-colors)){
  .pdf-#{nth(map-keys($social-colors),$i)}{
    color:_colors(nth(map-keys($social-colors),$i))
  }
}

// Maps fun --> map-values($map)
$list-values:map-values($social-colors);
.test-map-values {
  color: $list-values;
}
// Maps fun --> map-merge($map1,$map2)
$flag:(
  text:#f36,
  link:#f63,
  border:#ddd,
  background:#fff
);
$typo: (
  font-size:12px,
  line-height: 1.6,
  background: #000
);
$mergemap: map-merge($flag,$typo);
// @function _merge() {
//   $mergemap: map-merge($flag,$typo);
//   @for $i from 1 through length(map-keys($newmap)){
//    #{nth(map-keys($newmap),$i)}:#{nth(map-values($newmap),$i)};
//   }
// };
// .test-merge{
//   _merge();
// }

//Map fun --> map-remove
$newmap: map-remove($social-colors,dribble);
//Map fun --> keywords($args)
@mixin map($args...){
  @debug keywords($args);
}
@include map(
  $dribble: red,
  $facebook:blue,
  $github:green,
  $google:black,
  $twitter:yellow
);

//RGB fun -->rgba()
$bgcolor:orange;
.test-rgba {
    color: rgba(#f36,.5);
    background: rgba($bgcolor,.5);
    border-color: rgba(green,.5);
}
//RGB fun --> mix($color1,$color2,$weight)
.test-mix{
 color:mix(#f00,#00f);
 color:mix(#f00,#00f,25%);
 color:mix(rgba(255,0,0,0.5),#00f)
}
$color1:#a63;
$color2:#fff;
$bgcolor1:#f36;
$bgcolor2:#e36;
$borderColor1:#c36;
$borderColor2:#b36;
.mix {
  background:mix($bgcolor1,$bgcolor2,.75);
  color:mix($color1,$color2,.25);
  border-color:mix($borderColor1,$bgcolor2,.5);
}

//HSL fun --> lighten() / darken()
$baseColor: #ad141e;
.test-lighten {
  background: lighten($baseColor,10%);
}
.test-darken {
  background: darken($baseColor,10%);
}
.limit-lighten {
  background:lighten($baseColor,70%);
}
.limit-darken {
  background: darken($baseColor,40%);
}
//HSL fun --> saturate() / desaturate()
.test-saturate {
  background:saturate($baseColor,30%);
}
.test-desaturate {
  background:desaturate($baseColor,30%);
}
//HSL fun --> adjust-hue()
.test-adjust-hug-deg {
  background: adjust-hue($baseColor,30deg);
}
.test-adjust-hug-per {
  background: adjust-hue($baseColor,30%);
}
//HSL fun --> grayscale()
.test-grayscale {
  background: grayscale($baseColor);
}
.gray-desaturate {
  background: desaturate($baseColor,100%);
}
//Opacity fun --> alpha() / opacity
.test-alpha {
  top: alpha(red);
  left:alpha(rgba(red,.8));
  right:opacity(red);
  bottom:opacity(rgba(red,.8))
}
//opacity fun --> opacify() / fade-in()
.test-opacify {
  color:opacify(rgba(22,34,235,.6),.2);
  color:opacify(rgba(22,34,235,.6),.5);
  color:opacify(hsla(22,34%,23%,.6),.15);
  color:opacify(hsla(22,34%,23%,.6),.415);
  color:opacify(red,.15);
  color:opacify(#89adde,.15);
  color:fade-in(rgba(22,34,34,.5),.15);
  color:fade-in(rgba(23,34,34,.5),.615);
}
//opacity fun --> transparentize() / fade-out()
.test-transparentize {
  border-color:transparentize(red,.5);
  border-color:transparentize(#fde,.9);
  border-color:transparentize(rgba(98,233,124,.3),.11);
  border-color:transparentize(rgba(98,233,124,.3),.51);
  border-color:fade-out(red,.9);
  border-color:fade-out(hsla(98,6%,23%,.5),.1);
  border-color:fade-out(hsla(98,6%,23%,.5),.6)
}

/*@extend*/
.error {
  border: 1px #f00;
  background-color:#fdd;
}
.error.intrusion {
  background-image: url("/image/hacked.png");
}
.seriousError {
  @extend .error;
  border-width:3px;
}
/*other selector*/
.hoverlink {
  @extend a:hover;
}
.comment a.user:hover {
  font-weight: bold;
}
/*more extend*/
.one {
  border: 1px #f00;
  background-color:#fdd;
}
.attention {
  font-size:3em;
  background-color:#ff0;
}
.more-extend {
  @extend .one;
  @extend .attention;
  border-width:3px
}
/*%placeholder @extend*/
#conent a%extreme {
  color:blue;
  font-weight: bold;
  font-size:2em;
}
.notice {
  @extend %extreme;
}
/*@media*/
.sidebar{
  width:300px;
  @media screen and (orientation:landspace){
    width:500px;
  }
}
/*@media nest @media*/
@media screen {
  .sidebar {
    @media (orientation:landspace){
      width:500px;
    }
  }
}

$media:screen;
$feature:-webkit-min-device-pixel-ratio;
$value:1.5;
@media #{$media} and ($feature:$value) {
  .sidebar {
    width:500px;
  }
}

/*@at-root*/
.a{
  color:red;
  .b {
    color:orange;
    .c {
      color:yellow;
      @at-root .d{
        color:green;
      }
    }
  }
}

/*@debug @warn*/
@mixin adjust-location($x,$y) {
  @if unitless($x) {
    @warn "Assuming #{$x} to be in pixels";
    $x:1px * $x;
  }
  @if unitless($y) {
    @debug "Assuming #{$y} to be in pixels";
    $y:1px * $y;
  }
  position: relative;left:$x;top:$y;
}
.botton {
  @include adjust-location(20px,30)
}
/*@error*/
@mixin error($x){
  @if $x < 10 {
    width: $x * 10px;
  } @else if $x == 10 {
    width: $x * 1px;
  } @else {
    @error "this param is must to be less than or equal to 10 "
  }
}
.test-error {
  @include error(10);
}